public class Study_Java54 {
		/*
		 ★ Mdthod(메소드)
		 	-클래스가 가지고 있는 행위정보를 표현하는 것(동작, 기능)→ 함수(function)
		 	-동작(행위)을 만들어 놓고 필요할 때 사용하기 위해서 호출(Calling)
		 	-캡슐화의 원칙 : 클래스안에 메소드를 구현, 하나의 클래스 안에는 여러개의 메소드가 존재
		 	
		 ※ 클래스 안에는 무엇이 들어가는가?	
		 	-상태정보 : 멤버 변수(필드) ▶ DTO Class, VO Class
		 	-행위정보 : 멤버 메소드 ▶ DAO Class
		 	-main() : 자바는 반드시 main()메소드에서 프로그램이 실행(동작) ▶  Main Class
		 	
		 ★ 메소드의 형식(메소드를 만드는 방법)
			   ①     ②     ③     ④   (     ⑤      )
		 	public static void getSum(int a, int b) {	▶ 프로토타입: 머리, 정의, 선언
		 		~메소드 동작 구현~ 							▶ 바디: 구현부
		 		⑥return;
		 	}

		 	① 접근제어자 : public(접근허용- 외부에서 코드를 가져다 쓸 수 있다), private(정보은닉 : 내부만 허용-클래스 내부에서만 볼수있고 외부에서는 볼수 없음), (우선 이거 두개만 알아둘것)
		 				protected(같은 패키지 안에서 허용), default
		 	② 한정자 : static(자동으로 메모리에 생성-메모리를 잡아먹기때문에 남발하면 안됨), 생략(객체를 생성해서 접근), final(재정의가 불가)
		 	③ 리턴타입(반환값) : 메소드가 동작후에 최종적으로 만들어내는 결과값의 데이터 타입
		 		-리턴을 하지 않는 경우 : void ▶ 메소드 내부에 return 문이 없다.
		 		-리턴을 하는 경우 : 리턴되는 데이터 타입 ▶ 메소드 내부에 return 문이 있다. (보통 리턴될때 void를 해당 리턴되는 데이터 타입으로 변경 해야함)
		 	④ 메소드 이름 : 소문자로 시작, 키워드는 사용불가, 의미있게 작성, 변수명 작성규칙과 동일
		 	⑤ 매개변수 리스트 : 매소드가 동작하기 위해서 외부로부터 입력되는 데이터 ▶ 인수, 인자, parameter	
		 	⑥ return 문 : 메소드가 동작을 완료한 후, 결과값을 호출한 쪽으로 넘기는 행위
		 	
		★ 실인수(호출)와 가인수(정의)의 매개변수 전달 규칙 : Parameter Passing Rule	
			-실인수와 가인수의 매개변수의 개수가 같아야 한다.
			-실인수와 가인수의 데이터 타입이 같아야 한다.
			-실인수와 가인수의 이름은 같아도 되고 달라도 된다.(일반적으로 같은 이름을 쓰는 것이 관례적)
		 	
		 */

		//getSum() 메소드에 10과 20을 매개변수로 보내는 호출문 작성
		public static void main(String[] args) {
			int a= 10, b = 20;	//getSum() 메소드로 보낼 매개변수를 초기화
			getSum(a, b);		//getSum() 메소드 호출문 ▶ 실인수(실제값을 가지고 있는 인수)
				
		}//main()
		
		//2개의 정수를 매개변수로 받아 합(sum)을 구하여 출력하는 메소드(getSum())를 정의
		public static void getSum(int a, int b) {	//getSum() 메소드를 정의 ▶ 가인수
			int sum = a + b;
			System.out.println("첫 번째 인수 : "+a);
			System.out.println("첫 번째 인수 : "+b);
			System.out.println("두 인수의 합 : "+sum);
		}//getSum()
		
	}//class